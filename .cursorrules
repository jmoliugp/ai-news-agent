# Project - Cursor Rules

## Project Overview

This is an AI agent designed to read and query recent CNN news. The project uses web scraping to extract news content and process it for analysis and queries. It includes functionality for:

- Automated CNN news scraping
- AI content analysis
- Recent news query system
- Structured logging and performance monitoring
- Robust error handling and retry mechanisms

## Code Style & Standards

### TypeScript Patterns

- **Always use interfaces** for data structures, especially for scraped content
- **Proper typing is mandatory** - avoid `any` types
- **Use const assertions** where appropriate
- **Prefer async/await** over promises for readability

### Code Quality & Readability

- **Write clean, readable code** - prioritize clarity over cleverness
- **Keep cognitive complexity low** - break down complex functions into smaller, focused ones
- **Use descriptive variable names** - avoid abbreviations and single-letter variables
- **Avoid deep nesting** - use early returns and guard clauses
- **Comment complex logic** - explain the "why", not the "what"
- **Consistent formatting** - follow established patterns throughout the codebase
- **Handle errors gracefully** with try-catch blocks

### File Organization

- **Services directory** (`src/services/`) for modules with complex logic
- **Utils directory** (`src/utils/`) for shared utilities
- **Main entry point** (`src/index.ts`) orchestrates services

### Naming Conventions

- **ALWAYS use English** for all comments, documentation, variable names, function names, and any code-related text
- **No Spanish** in code, comments, or documentation - everything must be in English
- **Use descriptive English names** for variables, functions, classes, and interfaces

### Development Approach

- **Plan first, then execute** - always create a detailed plan of changes before implementing
- **Seek approval before applying** - present the plan and wait for confirmation before making changes
- **Make granular changes** - implement one feature or fix at a time
- **Incremental development** - build features step by step, testing each component
- **Clear separation** - separate concerns between different modules and services

### Main Entry Point Structure (`src/index.ts`)

```typescript
// 1. Imports - performance, services, utilities
import { performance } from 'perf_hooks';
import { analyzePost } from './services/ai-analysis';
import { fetchRecentPosts } from './services/scrapper-ycombinator';
import { Logger } from './utils/log';

// 2. Logger initialization
const log = new Logger('Main');

// 3. Main async function
const main = async (): Promise<void> => {
  // Performance timing start
  // Service orchestration
  // Performance timing end
};

// 4. Process-level error handlers
process.on('unhandledRejection', ...);
process.on('uncaughtException', ...);

// 5. Main execution with error handling
main().catch(error => { ... });
```

## Scraping Patterns

### Puppeteer Best Practices

- **Always close browser** after scraping
- **Use proper selectors** - prefer XPath selectors
- **Wait for selectors** before interaction
- **Extract data systematically** - title, description, link, image, author, date, tags

### Performance Tracking

- **Use performance.now()** for timing
- **Log execution time** with emoji (‚è±Ô∏è)
- **Monitor at function level** for each service
- **Format timing** to 2 decimal places

### Logging Standards

- **Use custom log utility** (`src/utils/log.ts`)
- **Emoji usage** only for most significant logs: üöÄ start, üéâ success milestones, üí• fatal errors, ‚è±Ô∏è timing
- **Include context** in log messages

#### Essential Logging Patterns

```typescript
// Function start/end
log.info('üöÄ functionName started');
log.info(`‚è±Ô∏è  Execution time: ${(end - start).toFixed(2)}ms`);

// Browser operations
log.info('Launching browser...');
log.success('Browser closed');

// Progress tracking
log.info(`Found ${count} items to process`);
log.success(`Processed ${successful}/${total} items`);

// Error handling
log.error(`Error processing item ${i}: ${error.message}`);
log.error(`üí• Fatal error: ${error.message}`);
```

## Error Handling

### Exception Patterns

- **Try-catch** around individual post parsing
- **Continue processing** other posts if one fails
- **Log errors** with context and proper emojis
- **Null/undefined checks** before processing elements

### Process-Level Handling

- **Unhandled rejection** listeners in main
- **Uncaught exception** handlers
- **Exit with code 1** on fatal errors
- **Always use finally blocks** for resource cleanup

### Error Logging Best Practices

- **Include context** - what operation was being performed
- **Use proper error types** - check `error instanceof Error`
- **Provide actionable information** - not just generic messages
- **Distinguish between recoverable and fatal errors**

## Development Workflow

### Code Organization

- **Keep main function clean** - delegate to services
- **Proper imports** and exports
- **Consistent formatting** and indentation

### Testing Considerations

- **Console.log results** for debugging
- **Performance metrics** for optimization
- **Error scenarios** should be handled gracefully

## New Scraper Implementation

When adding a new scraper:

1. Create `src/services/scrapper-{source}.ts`
2. Define interface for post structure
3. Implement `fetch{Content}` function following logging patterns
4. Add performance monitoring with proper timing logs
5. Include comprehensive error handling with structured logging
6. Update main to use new service
7. Test with sample data output and verify log output

## Dependencies & Tools

### Core Stack

- **TypeScript** - strict typing and modern JavaScript features
- **Puppeteer** - web scraping for CNN news extraction
- **Performance API** - execution timing and performance monitoring
- **Chalk** - colored logging output for better debugging
- **Custom utilities** - structured logging system

### Development Process

- **Modular architecture** - separate concerns
- **Clean interfaces** - define data contracts
- **Performance first** - monitor execution
- **Error resilience** - handle failures gracefully
- **Comprehensive logging** - track every operation

Remember: This project prioritizes clean, maintainable code with proper TypeScript typing, comprehensive error handling, and structured logging. Always test scrapers against live sites, handle layout changes gracefully, and maintain consistent logging patterns for debugging and monitoring.
